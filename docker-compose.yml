services:
  25--5-clock:
    build:
      context: ./apps/25--5-clock
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50005:3000

  american-british-translator:
    build:
      context: ./apps/american-british-translator
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50010:3000

  anonymous-message-board:
    build:
      context: ./apps/anonymous-message-board
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - DB_URI=${ANONYMOUS_MESSAGE_BOARD_DB_URI}
    command: npm start
    ports:
      - 50020:3000

  bar-chart:
    build:
      context: ./apps/bar-chart
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50025:3000

  build-a-pinterest-clone:
    build:
      context: ./apps/build-a-pinterest-clone
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - GITHUB_KEY=${BUILD_A_PINTEREST_CLONE_GITHUB_KEY}
      - GITHUB_SECRET=${BUILD_A_PINTEREST_CLONE_GITHUB_SECRET}
      - DB_URI=${BUILD_A_PINTEREST_CLONE_DB_URI}
      - APP_URL=${BUILD_A_PINTEREST_CLONE_APP_URL}
    command: npm start
    ports:
      - 50030:3000

  chart-the-stock-market:
    build:
      context: ./apps/chart-the-stock-market
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - APIKEY=${CHART_THE_STOCK_MARKET_APIKEY}
    command: npm start
    ports:
      - 50035:3000

  choropleth-map:
    build:
      context: ./apps/choropleth-map
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50037:3000

  drum-machine:
    build:
      context: ./apps/drum-machine
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50038:3000

  exercise-tracker:
    build:
      context: ./apps/exercise-tracker
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - DB_URI=${EXERCISE_TRACKER_DB_URI}
    command: npm start
    ports:
      - 50040:3000

  file-metadata-microservice:
    build:
      context: ./apps/file-metadata-microservice
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50050:3000

  forum-proxy:
    build:
      context: ./apps/forum-proxy
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50060:3000

  heat-map:
    build:
      context: ./apps/heat-map
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50064:3000

  image-search-abstraction-layer:
    build:
      context: ./apps/image-search-abstraction-layer
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - MONGO_URI=${IMAGE_SEARCH_ABSTRACTION_LAYER_MONGO_URI}
      - CSEID=${IMAGE_SEARCH_ABSTRACTION_LAYER_CSEID}
      - APIKEY=${IMAGE_SEARCH_ABSTRACTION_LAYER_APIKEY}
    command: npm start
    ports:
      - 50065:3000

  issue-tracker:
    build:
      context: ./apps/issue-tracker
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - DB=${ISSUE_TRACKER_DB}
    command: npm start
    ports:
      - 50070:3000

  javascript-calculator:
    build:
      context: ./apps/javascript-calculator
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50075:3000

  # Database, GitHub secrets, Google secrets
  manage-a-book-trading-club:
    build:
      context: ./apps/manage-a-book-trading-club
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - GITHUB_KEY=${MANAGE_A_BOOK_TRADING_CLUB_GITHUB_KEY}
      - GITHUB_SECRET=${MANAGE_A_BOOK_TRADING_CLUB_GITHUB_SECRET}
      - MONGO_URI=${MANAGE_A_BOOK_TRADING_CLUB_MONGO_URI}
      - APP_URL=${MANAGE_A_BOOK_TRADING_CLUB_APP_URL}
    command: npm start
    ports:
      - 50200:3000

  markdown-previewer:
    build:
      context: ./apps/markdown-previewer
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50205:3000

  metric-imperial-converter:
    build:
      context: ./apps/metric-imperial-converter
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50090:3000

  p2p-video-chat-application:
    build:
      context: ./apps/p2p-video-chat-application
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50100:3000

  personal-library:
    build:
      context: ./apps/personal-library
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - DB=${PERSONAL_LIBRARY_DB}
    command: npm start
    ports:
      - 50210:3000

  personal-portfolio:
    build:
      context: ./apps/personal-portfolio
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50260:3000

  product-landing-page:
    build:
      context: ./apps/product-landing-page
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50240:3000

  random-quote-machine:
    build:
      context: ./apps/random-quote-machine
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50105:3000

  request-header-parser-microservice:
    build:
      context: ./apps/request-header-parser-microservice
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50110:3000

  scatterplot-graph:
    build:
      context: ./apps/scatterplot-graph
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50115:3000

  secure-real-time-multiplayer-game:
    build:
      context: ./apps/secure-real-time-multiplayer-game
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50120:3000

  stock-price-checker:
    build:
      context: ./apps/stock-price-checker
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - DB_URI=${STOCK_PRICE_CHECKER_DB_URI}
    command: npm start
    ports:
      - 50140:3000

  stock-price-checker-proxy:
    build:
      context: ./apps/stock-price-checker-proxy
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - CACHE_TTL_MINUTES=${STOCK_PRICE_CHECKER_PROXY_CACHE_TTL_MINUTES}
      - IEX_API_KEY=${STOCK_PRICE_CHECKER_PROXY_IEX_API_KEY}
    command: npm start
    ports:
      - 50130:3000

  sudoku-solver:
    build:
      context: ./apps/sudoku-solver
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50150:3000

  survey-form:
    build:
      context: ./apps/survey-form
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50280:3000

  technical-documentation-page:
    build:
      context: ./apps/technical-documentation-page
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50250:3000

  timestamp-microservice:
    build:
      context: ./apps/timestamp-microservice
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50160:3000

  treemap-diagram:
    build:
      context: ./apps/treemap-diagram
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50255:3000

  tribute-page:
    build:
      context: ./apps/tribute-page
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
    command: npm start
    ports:
      - 50270:3000

  # TWITCH_CLIENT_ID, TWITCH_CLIENT_SECRET, ACCESS_TOKEN, twitch update script (could run this
  # as a prestart script, then restart this container every 30 days or so)
  twitch-proxy:
    build:
      context: ./apps/twitch-proxy
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - TWITCH_CLIENT_ID=${TWITCH_PROXY_TWITCH_CLIENT_ID}
      - TWITCH_CLIENT_SECRET=${TWITCH_PROXY_TWITCH_CLIENT_SECRET}
      - ACCESS_TOKEN=${TWITCH_PROXY_ACCESS_TOKEN}
    command: npm start
    ports:
      - 50170:3000

  url-shortener-microservice:
    build:
      context: ./apps/url-shortener-microservice
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - DB_URI=${URL_SHORTENER_MICROSERVICE_DB_URI}
    command: npm start
    ports:
      - 50180:3000

  voting-app:
    build:
      context: ./apps/voting-app
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - MONGO_URI=${VOTING_APP_MONGO_URI}
    command: npm start
    ports:
      - 50185:3000

  weather-proxy:
    build:
      context: ./apps/weather-proxy
      dockerfile: ../../Dockerfile
    environment:
      - PORT=3000
      - OPEN_WEATHER_API_KEY=${WEATHER_PROXY_OPEN_WEATHER_API_KEY}
    command: npm start
    ports:
      - 50190:3000
